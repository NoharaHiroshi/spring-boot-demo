<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<!-- 上面的部分是配置文件头，用最新版的MBG需要使用上面的xml头，配置文件必须包含上面的DOCTYPE。-->
<!-- 配置文件根节点，无属性 -->
<generatorConfiguration>
    <!-- generatorConfiguration的子元素是实际配置文件（有严格顺序）
    1、<properties> (0个或1个)
    2、<classPathEntry> (0个或多个)
    3、<context> (1个或多个) -->


    <!-- 引入properties配置文件，用来指定外部元素，不是必须。属性有resource，用来指定相对路径。 url，用来指定绝对路径 -->
    <properties resource="./application.properties"></properties>


    <!-- 指定数据库驱动路径:选择你的本地硬盘上面的数据库驱动包-->
    <classPathEntry  location="D:\maven repository\mysql\mysql-connector-java\8.0.13\mysql-connector-java-8.0.13.jar"/>


    <!-- 用来指定生成一组对象的环境， 例如指定要连接的数据库，要生成对象的类型和要处理的数据库中的表。 -->
    <!-- id 为必选属性，下面所有的配置都是基于targetRuntime="MyBatis3" 另外还有MyBatis3Simple、Ibatis2Java2或**Ibatis2Java5** -->
    <context id="DB2Tables"  targetRuntime="MyBatis3">
        <!-- context的子元素为配置内容，有严格的顺序要求
            <property> (0个或多个)
            <plugin> (0个或多个)
            <commentGenerator> (0个或1个)
            <jdbcConnection> (1个)
            <javaTypeResolver> (0个或1个)
            <javaModelGenerator> (1个)
            <sqlMapGenerator> (0个或1个)
            <javaClientGenerator> (0个或1个)
            <table> (1个或多个)
        -->
        <commentGenerator>
            <!-- 是否去除自动生成的注释带有时间戳 true：是 ： false:否 -->
            <property name="suppressDate" value="true"/>
            <!-- 是否去除自动生成的注释 true：是 ： false:否 -->
            <property name="suppressAllComments" value="true"/>
        </commentGenerator>

        <!-- 数据库连接配置 -->
        <!-- 数据库连接属性：完全限定类名、链接URL、用户名、密码 -->
        <jdbcConnection driverClass="${spring.datasource.driver-class-name}" connectionURL="${spring.datasource.url}" userId="${spring.datasource.username}" password="${spring.datasource.password}">
        </jdbcConnection>

        <!-- 指定JDBC类型和Java类型如何转换-->
        <javaTypeResolver>
            <!-- 该属性还有一个可以配置的<property>元素。 可以配置的属性为forceBigDecimals，
            该属性可以控制是否强制DECIMAL和NUMERIC类型的字段转换为Java类型的java.math.BigDecimal,默认值为false -->
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>

        <!-- 生成模型的包名和位置-->
        <!-- 最后生成的路径是targetProject + targetPackage，两个属性都是必选，
        targetPackage:生成实体类存放的包名，一般就是放在该包下
        targetProject:指定目标项目路径，可以是绝对路径或相对路径（如 targetProject="src/main/java"）
        -->
        <javaModelGenerator targetPackage="com.example.demo.model" targetProject="src/main/java">
            <!-- enableSubPackages如果true，会根据catalog和schema来生成子包。如果false就会直接用targetPackage属性。默认为false。 -->
            <property name="enableSubPackages" value="true"/>
            <!--trimStrings:是否对数据库查询结果进行trim操作，如果设置为true就会生成类似这样
            public void setUsername(String username) {this.username = username == null ? null : username.trim();}
            的setter方法。默认值为false。 -->
            <property name="trimStrings" value="true"/>
        </javaModelGenerator>


        <!-- 生成映射文件的包名和位置，如果没有sqlMapGenerator，则只生成实体类，不生成mapper.xml -->
        <sqlMapGenerator targetPackage="resources.mapping" targetProject="src/main">
            <property name="enableSubPackages" value="true"/>
        </sqlMapGenerator>

        <!-- 生成Mapper接口的包名和位置， 如果没有javaClientGenerator ，则只生成实体类，不生成mapper -->
        <!-- 类型为XMLMAPPER，所有的方法都在XML中，接口调用依赖XML文件。除此之外，还有另外两种方式
        ANNOTATEDMAPPER:基于注解的Mapper接口，不会有对应的XML映射文件
        MIXEDMAPPER:XML和注解的混合形式，(上面这种情况中的)SqlProvider注解方法会被XML替代。
        -->
        <javaClientGenerator type="ANNOTATEDMAPPER" targetPackage="com.example.demo.mapper" targetProject="src/main/java">
            <property name="enableSubPackages" value="true"/>
        </javaClientGenerator>

        <!-- 要生成的表 tableName是数据库中的表名或视图名 domainObjectName是实体类名-->
        <!-- tableName会在多个数据库中寻找符合条件的表，如果发现复数的表，需要加上schema限定是哪个数据库的哪张表 -->
        <!-- 在url中加入nullCatalogMeansCurrent = true 防止生成..WithBLOBs -->
        <!-- tableName，可以使用SQL通配符匹配多个表，例如要生成全部的表：<table tableName="%" /> -->
        <table
                schema="spring_boot_sql"
                tableName="user"
                domainObjectName="User"
                enableCountByExample="false"
                enableUpdateByExample="false"
                enableDeleteByExample="false"
                enableSelectByExample="false"
                selectByExampleQueryId="false"
        ></table>
        <table
                schema="spring_boot_sql"
                tableName="customer"
                domainObjectName="Customer"
                enableCountByExample="false"
                enableUpdateByExample="false"
                enableDeleteByExample="false"
                enableSelectByExample="false"
                selectByExampleQueryId="false"
        ></table>
    </context>
</generatorConfiguration>